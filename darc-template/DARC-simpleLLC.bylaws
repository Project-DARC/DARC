/**
 This is a template for simple LLC structure for DARC.
--------------------------------
 The idea is very simple:
 1. There are only two level of tokens, common stock and board members.
 2. Level-0 is the common stock, voting weight = 1, dividend weight = 1
 3. Level-1 is the board members, voting weight = 1, dividend weight = 0.
 4. All the operations needs to be voted and approved by the board members(level-1 tokens), except for the following:
    - Pay cash (dividendable)
    - Offer dividends
 5. Still any address with level-1 token can call emergency agent to take over the control of the LLC structure in case of emergency, if necessary. For example:
    - The board members are not able to make decisions in time.
    - Technical issues, such as deadlocks by adding and enabling plugins so that no operation can be approved.
    - Disputs among the board members, but can be resolved by the emergency agent when providing enough evidence, such as the IPFS hash of the scanned PDF documents and approved by all the board members.
--------------------------------
 Notes: 
 1. All token transfer, token creation, token destruction, adding plugins, enabling plugins, and disabling plugins need to be voted and approved by the board members.
 2. approvalThreshold is a number in range(0, 100), which is the percentage of the board members who need to approve the operation. We recommend to set it to 99, which means that all the board members need to approve the operation.
 3. You can still add more plugins to the LLC structure, but you need to make sure that all the operations need to be voted and approved by the board members.
 4. For emergency, you can still add one or a few emergency agent addresses to the LLC structure, which can take over the control of the LLC structure in case of emergency.
--------------------------------
 Use this function by calling the following:

 To initialize the LLC structure:
  buildSimpleLLC(
    L0TokenOwnerList,
    L0TokenNumberList,
    L1TokenOwnerList,
    L1TokenNumberList,
    approvalThreshold
  );

  for example, if addr0, addr1, addr2, addr3, addr4 are the addresses of the board members, and they own 10, 20, 30, 40, 50 level-0 tokens, and they own 1, 1, 1, 1, 1 level-1 tokens, and the approvalThreshold is 99, then you can call the following:

  buildSimpleLLC(
    [addr0, addr1, addr2, addr3, addr4],
    [10, 20, 30, 40, 50],
    [addr0, addr1, addr2, addr3, addr4],
    [1,1,1,1,1],
    99
  );

*/

const { batch_add_and_enable_plugins, batch_create_token_classes, batch_mint_tokens } = require("../darc-js/src/darcjs");


/**
 * The function to build a simple LLC structure.
 * Make sure that the function 
 */
function buildSimpleLLC(
  L0TokenOwnerList,
  L0TokenNumberList,
  L1TokenOwnerList,
  L1TokenNumberList,
  approvalThreshold
)
{
  checkInput(L0TokenOwnerList, L0TokenNumberList, L1TokenOwnerList, L1TokenNumberList, approvalThreshold);
  deployPlugins(L0TokenOwnerList, L0TokenNumberList, L1TokenOwnerList, L1TokenNumberList, approvalThreshold);
}

// check input
function checkInput(
  L0TokenOwnerList,
  L0TokenNumberList,
  L1TokenOwnerList,
  L1TokenNumberList,
  approvalThreshold
) {

  // check input length
  if (L0TokenOwnerList.length !== L0TokenNumberList.length) {
    throw new Error('The length of L0TokenOwnerList and L0TokenNumberList should be the same.');
  }

  if (L1TokenOwnerList.length !== L1TokenNumberList.length) {
    throw new Error('The length of L1TokenOwnerList and L1TokenNumberList should be the same.');
  }

  // make sure that approvalThreshold is a number in range(0, 100)
  if (typeof approvalThreshold !== 'number') {
    throw new Error('ApprovalThreshold should be a number.');
  }
  if (approvalThreshold < 0 || approvalThreshold > 100) {
    throw new Error('ApprovalThreshold should be a number in range(0, 100).');
  }

  // make sure that token numbers are all positive and integers
  for (let i = 0; i < L0TokenNumberList.length; i++) {
    if (typeof L0TokenNumberList[i] !== 'number' || L0TokenNumberList[i] < 0 || L0TokenNumberList[i] % 1 !== 0) {
      throw new Error('The token number should be a positive integer.');
    }
  }

  for (let i = 0; i < L1TokenNumberList.length; i++) {
    if (typeof L1TokenNumberList[i] !== 'number' || L1TokenNumberList[i] < 0 || L1TokenNumberList[i] % 1 !== 0) {
      throw new Error('The token number should be a positive integer.');
    }
  }

  // make sure that all the token owners are addresses
  for (let i = 0; i < L0TokenOwnerList.length; i++) {
    if (typeof L0TokenOwnerList[i] !== 'string') {
      throw new Error('The token owner should be an address.');
    }
  }

  for (let i = 0; i < L1TokenOwnerList.length; i++) {
    if (typeof L1TokenOwnerList[i] !== 'string') {
      throw new Error('The token owner should be an address.');
    }
  }
}

// deploy plugins
function deployPlugins(
  L0TokenOwnerList,
  L0TokenNumberList,
  L1TokenOwnerList,
  L1TokenNumberList,
  approvalThreshold
) {

  // 1. create token classes: L0 and L1


  batch_create_token_classes(
    ["L0-COMMON-STOCK"],
    [0],
    [1],
    [1]
  )

  // 2. mint tokens
  // 2.1 initialize token class array: N zeros
  const L0TokenClassArray = Array(L0TokenOwnerList.length).fill(0);

  // 2.2 send it to the batch_create_token_classes function
  batch_mint_tokens(
    L0TokenOwnerList,
    L0TokenClassArray,
    L0TokenNumberList    
  )

  // 2.3 initialize token class array: N ones
  const L1TokenClassArray = Array(L1TokenOwnerList.length).fill(1);
  // 2.4 send it to the batch_create_token_classes function
  batch_mint_tokens(
    L1TokenOwnerList,
    L1TokenClassArray,
    L1TokenNumberList    
  )

  // 3. add plugins

  // plugin 1(before-operation): if operation !== "PAY_CASH" && operation !== "OFFER_DIVIDENDS" && operation !== "CALL_EMERGENCY", then need to be voted and approved by the board members
  const beforeOpPlugin1 = {

  }

  // plugin 2(before-operation): if operation === "CALL_EMERGENCY" && opeartor owns at least 1 L1 token, then the operation can be approved
  const beforeOpPlugin2 = {

  }

  // plugin 3 (after-opeartion): if (operation === "PAY_CASH" && pay cash is dividedable) || operation === "OFFER_DIVIDENDS", then start a vote for execution
  const afterOpPlugin1 = {

  }

  batch_add_and_enable_plugins(
    [
      beforeOpPlugin1,
      beforeOpPlugin2,
      afterOpPlugin1
    ]
  );
}